import os
import asyncio
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.types import Update

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET")
WEBAPP_PUBLIC = os.getenv("WEBAPP_PUBLIC", "")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
app = FastAPI()

# --- Handlers ---
@dp.message(commands=["start"])
async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üéâ –≠—Ç–æ Foody –±–æ—Ç.\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ü–∏–∏ –∏ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –µ–¥—É —Å–æ —Å–∫–∏–¥–∫–∞–º–∏ üçîü•ó\n\n"
        f"–û—Ç–∫—Ä—ã—Ç—å –≤–∏—Ç—Ä–∏–Ω—É: {WEBAPP_PUBLIC}"
    )

# --- Webhook endpoint ---
@app.post(f"/{WEBHOOK_SECRET}")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.get("/health")
async def health():
    return {"ok": True}

# --- Startup logic ---
@app.on_event("startup")
async def on_startup():
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook —á–µ—Ä–µ–∑ API Telegram, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    print("Bot is starting...")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=int(os.getenv("PORT", 8000))
    )
